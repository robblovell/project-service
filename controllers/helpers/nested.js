// Generated by CoffeeScript 1.10.0
(function() {
  var Nested, Resource, async, mongoose;

  async = require('async');

  mongoose = require('mongoose');

  Resource = require('resourcejs');

  module.exports = Nested = (function() {
    function Nested() {}

    Nested.find = function(parentFiled, Child, childField, method, resources, callback) {
      var finds, i, len, query, resource;
      if (method === "GET") {
        if ((resources != null) && resources instanceof Array) {
          finds = [];
          for (i = 0, len = resources.length; i < len; i++) {
            resource = resources[i];
            finds.push(function(cb) {
              var query;
              query = {};
              query[parentFiled] = resource._doc._id.toString();
              return Child.find(query, function(error, result) {
                if (error != null) {
                  console.log("Error:" + error);
                  req.res.resource.item._doc[childField] = error;
                } else if (result != null) {
                  console.log("Result:" + JSON.stringify(result));
                  resource._doc[childField] = result;
                }
                return cb(error, result);
              });
            });
          }
          return async.series(finds, function(error, result) {
            if ((error != null)) {
              console.log("Error:" + error);
            }
            return callback(error, resources);
          });
        } else {
          if ((resources != null)) {
            resource = resources;
            query = {};
            query[parentFiled] = resource._doc._id.toString();
            return Child.find(query, function(error, result) {
              if (error != null) {
                console.log("Error:" + error);
                req.res.resource.item._doc[childField] = error;
              } else if (result != null) {
                console.log("Result:" + JSON.stringify(result));
                resource._doc[childField] = result;
              }
              return callback(error, resources);
            });
          } else {
            return callback("Not Found", null);
          }
        }
      } else {
        return callback(null, resources);
      }
    };

    return Nested;

  })();

}).call(this);

//# sourceMappingURL=nested.js.map
