// Generated by CoffeeScript 1.10.0
(function() {
  var Nested, Resource, async, mongoose;

  async = require('async');

  mongoose = require('mongoose');

  Resource = require('resourcejs');

  module.exports = Nested = (function() {
    function Nested() {}

    Nested.find = function(Child, childField, method, resources, callback) {
      var FindFunction, ch, data, finds, i, j, len, len1, pos, records, ref, row;
      FindFunction = function(finds, childs, chpos, childid) {
        return finds.push(function(cb) {
          return Child.findById(childid, function(error, result) {
            if (error != null) {
              childs[chpos] = error;
            } else if (result != null) {
              childs[chpos] = result;
            }
            return cb(error, result);
          });
        });
      };
      if (resources == null) {
        callback("Not Found", null);
        return;
      }
      records = null;
      if (resources instanceof Array) {
        records = resources;
      } else {
        records = [resources];
      }
      finds = [];
      for (i = 0, len = records.length; i < len; i++) {
        row = records[i];
        data = row;
        if (typeof data._doc !== "undefined") {
          data = row._doc;
        }
        if (data[childField] instanceof Array) {
          ref = data[childField];
          for (pos = j = 0, len1 = ref.length; j < len1; pos = ++j) {
            ch = ref[pos];
            FindFunction(finds, data[childField], pos, ch);
          }
        } else {
          FindFunction(finds, data, childField, data[childField]);
        }
      }
      return async.parallel(finds, function(error, result) {
        if ((error != null)) {
          console.log("Error:" + error);
        }
        return callback(error, resources);
      });
    };

    return Nested;

  })();

}).call(this);

//# sourceMappingURL=Nested2.js.map
