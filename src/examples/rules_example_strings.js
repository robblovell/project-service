// Generated by CoffeeScript 1.10.0
(function() {
  var R, RuleEngine, facts, i, len, rule, rules;

  RuleEngine = require('node-rules');

  rules = [
    {
      "condition": "R.when(this.transactionTotal < 500);",
      "consequence": "this.result = false; R.stop();",
      "priority": 4
    }, {
      "condition": "R.when(this.product.SKU == 500 && this.product.price > 20);",
      "consequence": "this.result = this.product; R.stop();",
      "priority": 4
    }
  ];

  for (i = 0, len = rules.length; i < len; i++) {
    rule = rules[i];
    rule.condition = new Function('R', rule.condition);
    rule.consequence = new Function('R', rule.consequence);
  }

  facts = {
    product: {
      SKU: 500,
      price: 25
    },
    transactionTotal: 499
  };

  R = new RuleEngine(rules);

  R.execute(facts, function(result) {
    if (result.result) {
      return console.log("Discount!" + JSON.stringify(result.result));
    } else {
      return console.log("No discount");
    }
  });

  ({
    "context": {
      "name": "Rule 1",
      "seller": "xyz",
      "SKU": "123"
    }
  });

  ({
    "context": {
      "name": "Rule 1",
      "seller": "xyz",
      "SKU": "123"
    },
    "rules": [
      {
        "condition": "R.when(this.transactionTotal < 500);",
        "consequence": "this.result = false; R.stop();",
        "priority": "10"
      }, {
        "condition": "R.when(this.product.SKU == 500 && this.product.price > 20);",
        "consequence": "this.product['discount']=20; this.result = this.product; R.stop();",
        "priority": "10"
      }
    ]
  });

  [
    {
      "context": [
        {
          "name": "Rule 3",
          "seller": "xyz"
        }
      ],
      "rules": [
        {
          "condition": "R.when(this.transactionTotal < 500);",
          "consequence": "this.result = false; R.stop();",
          "priority": "10"
        }, {
          "condition": "R.when(this.product.SKU == 500 && this.product.price > 20);",
          "consequence": "this.product['discount']=20; this.result = this.product; R.stop();",
          "priority": "10"
        }
      ]
    }
  ];

  ({
    "context": [
      {
        "name": "Rule 3",
        "seller": "xyz"
      }
    ],
    "fact": {
      "product": {
        "SKU": 500,
        "price": 25
      },
      "transactionTotal": 500
    }
  });

}).call(this);

//# sourceMappingURL=rules_example_strings.js.map
